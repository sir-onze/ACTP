<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/*
 * 4 aventureiros are about to cross a damaged bridge in the middle of the
 * night. The bridge can only carry two of the vikings at the time and to
 * find the way over the bridge the vikings need to bring a torch.  The
 * vikings need 5, 10, 20 and 25 minutes (one-way) respectively to cross
 * the bridge. 

 * Does a schedule exist which gets all four vikings over the bridge
 * within 60 minutes?
 */

chan grab, drop;		// Pegar ou largar a lanterna
int[0,1] L;		        // Vari√°vel de controlo do estado da lanterna
clock time;		        // Templo global da travessia

</declaration>
	<template>
		<name x="40" y="16">Adventurer</name>
		<parameter>const int delay</parameter>
		<declaration>clock y;</declaration>
		<location id="id0" x="-603" y="-119">
			<name x="-613" y="-153">start</name>
		</location>
		<init ref="id0"/>
	</template>
	<template>
		<name x="40" y="16">Bridge</name>
		<declaration>

// Put an element at the end of the queue
/*void enqueue(id_t element)
{
        list[len++] = element;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}

// Returns the front element of the queue
id_t front()
{
   return list[0];
}

// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}*/</declaration>
		<location id="id1" x="-238" y="-17">
			<name x="-248" y="-51">start</name>
		</location>
		<location id="id2" x="8" y="-17">
			<name x="-2" y="-51">finish</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
		</transition>
	</template>
	<system>const int onemin    = 1;
const int twomin    = 2;
const int fivemin   = 5;
const int tenmin    = 10;

Adventurer1 = Adventurer(onemin);
Adventurer2 = Adventurer(twomin);
Adventurer3 = Adventurer(fivemin);
Adventurer4 = Adventurer(tenmin);

system Adventurer1, Adventurer2, Adventurer3, Adventurer4, Bridge;</system>
	<queries>
		<query>
			<formula>
			</formula>
			<comment>===== Validation Properties:
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Gate.Occ
			</formula>
			<comment>Gate can receive (and store in queue) msg's from approaching trains.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross
			</formula>
			<comment>Train 0 can reach crossing.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(1).Cross
			</formula>
			<comment>Train 1 can reach crossing.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross and Train(1).Stop
			</formula>
			<comment>Train 0 can be crossing bridge while Train 1 is waiting to cross.
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Train(0).Cross and (forall (i : id_t) i != 0 imply Train(i).Stop)
			</formula>
			<comment>Train 0 can cross bridge while the other trains are waiting to cross.
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>===== Safety Properties:
			</comment>
		</query>
		<query>
			<formula>A[] forall (i : id_t) forall (j : id_t) Train(i).Cross &amp;&amp; Train(j).Cross imply i == j
			</formula>
			<comment>There is never more than one train crossing the bridge (at
any time instance).
			</comment>
		</query>
		<query>
			<formula>A[] Gate.list[N] == 0
			</formula>
			<comment>There can never be N elements in the queue (thus the array will not overflow).
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>===== Liveness Properties:
			</comment>
		</query>
		<query>
			<formula>Train(0).Appr --&gt; Train(0).Cross
			</formula>
			<comment>Whenever a train approaches the bridge, it will eventually cross.
			</comment>
		</query>
		<query>
			<formula>Train(1).Appr --&gt; Train(1).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(2).Appr --&gt; Train(2).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(3).Appr --&gt; Train(3).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(4).Appr --&gt; Train(4).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Train(5).Appr --&gt; Train(5).Cross
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>
			</formula>
			<comment>===== Deadlock checking:
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>The system is deadlock-free.
			</comment>
		</query>
	</queries>
</nta>
